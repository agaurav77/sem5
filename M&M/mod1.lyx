#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter Inconsolata
\font_math auto
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 10
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 4cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation 0bp
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Revision of logic circuits with emphasis on control lines
\end_layout

\begin_layout Standard
Using binary logic for computers is much easier than decimal logic, since
 it naturally allows us to use the two state analogy of switches.
 Switches can be in two states - on, off.
 Similarly, binary numbers are represented by two types of digits - 0 and
 1.
 
\end_layout

\begin_layout Subsection
Microprocessors & Microcontrollers
\end_layout

\begin_layout Standard
Microprocessors are at the core of modern day computing.
 On the basis of instructions that microprocessors understand, their computers
 are called either RISCs (reduced instruction set computers) or CISCs (complex
 instruction set computers).
 RISCs typically consist of more internal registers than CISCs and have
 much simpler designs.
 The difference between microprocessors and microcontrollers, however, is
 more subtle.
 A 
\series bold
microprocessor
\series default
 is highly programmable and understands all general instructions.
 
\series bold
Microcontrollers
\series default
, are packaged and pre programmed boards meant for specific purposes, thereby
 understanding specific inputs.
 For example, your Android phone has a microprocessor, but your oven or
 fridge typically works via a microcontroller.
\end_layout

\begin_layout Subsection
ASCII
\end_layout

\begin_layout Standard
ASCII stands for 
\series bold
American Standard Code for Information Interchange
\series default
.
 Its an input output mapping which maps characters, numbers, newlines, spaces
 and different sorts of inputs to a binary 7 digit code.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/ASCII1.GIF
	scale 40

\end_inset


\end_layout

\begin_layout Section
SAP concepts with stress on timing diagrams
\end_layout

\begin_layout Subsection
Three State Output
\end_layout

\begin_layout Standard
Typically, there are register and operation gates which have only two states
 - high and low.
 However, there is a third state, called 
\series bold
high impedance
\series default
 state, which is often used in computer design.
 In this state, the output is a fluctuation of high and low, such that it
 is effectively remoed from the circuit.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/three-state.jpg
	scale 70

\end_inset


\end_layout

\begin_layout Subsection
Buses
\end_layout

\begin_layout Standard
A bus is simply said, a collection of 1-bit data lines, such that it allows
 for transfer of multi bit words in between connected registers.
 Every register, for this purpose has two inputs, one for enable and one
 for load.
 If enable is high, then the output of the register is shown along the bus
 which can be read by another register.
 If load is high, a register reads the input from the bus and its value
 changes to hold that value.
 Buses can be of two types - serial and parallel.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/2-2-complex-bus.svg
	scale 60

\end_inset


\end_layout

\begin_layout Subsection
SAP-1 for Intel 8085
\end_layout

\begin_layout Enumerate
Load next instruction's address into Program Counter.
\end_layout

\begin_layout Enumerate
Store the address from Program Counter to MAR via bus.
\end_layout

\begin_layout Enumerate
Fetch instruction from memory at memory address corresponding to the value
 in MAR.
\end_layout

\begin_layout Enumerate
Store instruction from memory into IR.
\end_layout

\begin_layout Enumerate
Generate control sequence from IR's opcode and data.
\end_layout

\begin_layout Enumerate
Execute accordingly.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename img/2-3-sap-1.png
	scale 70

\end_inset


\end_layout

\begin_layout Standard
A 
\series bold
machine cycle
\series default
 is the the time taken for an entire fetch and execute cycle.
 In SAP-1, the fetch cycle consists of 1, 2, 3 and the execute consists
 of 4, 5, 6.
 Each step is completed in 
\begin_inset Formula $T$
\end_inset

 time.
 Thus the machine cycle time for SAP-1 is 
\begin_inset Formula $6T$
\end_inset

.
 SAP-1 has a fixed clock cycle time.
 The 
\series bold
fetch cycle
\series default
 -
\end_layout

\begin_layout Itemize
\begin_inset Formula $T_{1}$
\end_inset

 - address state or 
\begin_inset Formula $PC_{\mbox{out}}$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
PC's value is output on bus.
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Formula $T_{2}$
\end_inset

 - increment state or 
\begin_inset Formula $PC+1$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
PC is incremented and value of PC is stored into MAR.
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Formula $T_{3}$
\end_inset

 - memory state
\end_layout

\begin_deeper
\begin_layout Standard
Data is fetched from memory.
\end_layout

\end_deeper
\begin_layout Standard
Any operation is done via registers A, B and the output is typically stored
 in register A.
 The control sequence is of the form
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mbox{C_{P}E_{P}L'_{M}C'_{E}L'_{I}E'_{I}L'_{A}E'_{A}S_{U}E_{U}L'_{B}L'_{O}}
\]

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
The PC (Program Counter) holds the address of next instruction to be executed.
 MAR (Memory Address Register) and Input has data and address registers.
 The memory is TTL type.
 In SAP - 1, the various operations possible include 
\family typewriter
LDA <address>
\family default
, 
\family typewriter
ADD <address>
\family default
, 
\family typewriter
SUB <address>
\family default
, 
\family typewriter
OUT
\family default
 and 
\family typewriter
HLT
\family default
.
 Respective opcodes are 
\family typewriter
0000
\family default
, 
\family typewriter
0001
\family default
, 
\family typewriter
0010
\family default
, 
\family typewriter
1110
\family default
 and 
\family typewriter
1111
\family default
.
 User input is taken typically via registers 
\family typewriter
6H-8H
\family default
.
\end_layout

\begin_layout Subsection
Instruction Types
\end_layout

\begin_layout Standard
In general, the instructions may be 
\emph on
memory referencing
\emph default
 (like 
\family typewriter
LDA
\family default
, 
\family typewriter
ADD
\family default
, 
\family typewriter
SUB
\family default
) or 
\emph on
non memory referencing
\emph default
 (like 
\family typewriter
OUT
\family default
, 
\family typewriter
HLT
\family default
).
 
\family typewriter
HLT
\family default
 stops the clock and halts the program.

\family typewriter
 OUT
\family default
 prints the output i.e.
 value of register 
\begin_inset Formula $A$
\end_inset

 via the binary display.
 In SAP-1, the number of instructions are few, so it is easy to create a
 controller sequencer specifically tailored to generate the control sequences
 we need.
 However, as the complexity of hardware increases, and more and more instruction
s are accomodated, it becomes difficult to design a controller sequencer
 which works by simple logic.
 Thus we use a 
\emph on
hardware control matrix
\emph default
 which has a mapping of the instructions and the subsequent control sequences.
\end_layout

\begin_layout Section
Microinstructions
\end_layout

\begin_layout Standard
The accumulator register or 
\family typewriter
Reg A
\family default
 stores the result of all 
\family typewriter
ADD
\family default
 or 
\family typewriter
SUB
\family default
 operations.
 By default, the input operands are the values stored in 
\family typewriter
Reg A
\family default
 and 
\family typewriter
Reg B
\family default
.
 In SAP-1, we have 4 bit opcodes, 4 bit addresses, and 8 bit data.
\end_layout

\begin_layout Subsection
Fetch Cycle
\end_layout

\begin_layout Standard
The fetch cycle is quite the same for all operations, taking 
\begin_inset Formula $3T$
\end_inset

 clock cycles.
 For each of the steps in the fetch cycle, the controller sequencer generates
 a control sequence of 12 bits.
 Essentially this control sequence is a sequence of binary microinstructions
 that enable or disable portions of microprocessor and allow for read write
 and processing operations.
 For SAP-1, the control sequences can be written as
\end_layout

\begin_layout Itemize
\begin_inset Formula $T_{1}=\mbox{E_{P}L'_{M}}$
\end_inset

, enable 
\begin_inset Formula $PC$
\end_inset

 and get its value on bus, and simultaneously load 
\begin_inset Formula $MAR$
\end_inset

 from bus.
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $T_{2}=\mbox{C_{P}}$
\end_inset

, increment 
\begin_inset Formula $PC$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Formula $T_{3}=\mbox{C'_{E}L'_{I}}$
\end_inset

, read data from memory using chip enable and load it into 
\begin_inset Formula $IR$
\end_inset

 simultaneously.
\end_layout

\begin_layout Subsection
Execute Cycle
\end_layout

\begin_layout Standard
The execute cycle is dynamic in the sense that the number of micro instructions
 needed to complete the cycle depends directly on what the instruction is.
 All the loading of data into bus or from it to any register happens in
 the midway of any clock cycle.
 Why? This is because of the intermediate 
\emph on
setup time
\emph default
 and 
\emph on
hold time
\emph default
.
 Setup time is the amount of time an input is given before it is loaded
 into a register.
 Hold time is the time needed before the output of a register stabilises
 and is available for use.
 The dynamic nature of execute cycle is evident from how we program microinstruc
tions for 
\family typewriter
LDA
\family default
, 
\family typewriter
ADD
\family default
 and 
\family typewriter
SUB
\family default
.
\end_layout

\begin_layout Itemize
For 
\family typewriter
LDA <address>
\family default
,
\end_layout

\begin_deeper
\begin_layout Itemize
in 
\begin_inset Formula $T_{4}$
\end_inset

, address is sent to 
\begin_inset Formula $MAR$
\end_inset

 so that data can be fetched from the subsequent memory location.
 Thus we need to activate 
\begin_inset Formula $MAR$
\end_inset

 and 
\begin_inset Formula $IR$
\end_inset

.
 So, 
\begin_inset Formula $T_{4}=\mbox{L'_{M}E'_{I}}$
\end_inset

.
\end_layout

\begin_layout Itemize
in 
\begin_inset Formula $T_{5}$
\end_inset

, data is read from memory corresponding to the address in 
\begin_inset Formula $MAR$
\end_inset

, and read data is stored in 
\begin_inset Formula $A$
\end_inset

.
 This concludes 
\family typewriter
LDA
\family default
.
 So, 
\begin_inset Formula $T_{5}=\mbox{C'_{E}L'_{A}}$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Formula $T_{6}=\mbox{NOP}$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Itemize
For 
\family typewriter
ADD
\family default
,
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $T_{4}=\mbox{L'_{M}E'_{I}}$
\end_inset

.
\end_layout

\begin_layout Itemize
In 
\begin_inset Formula $T_{5}$
\end_inset

, read data is stored in 
\begin_inset Formula $B$
\end_inset

.
 So, 
\begin_inset Formula $T_{5}=\mbox{C'_{E}L'_{B}}$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Formula $T_{6}=E_{U}$
\end_inset

 (addition).
\end_layout

\end_deeper
\begin_layout Itemize
For 
\family typewriter
SUB
\family default
,
\end_layout

\begin_deeper
\begin_layout Standard
Same as 
\family typewriter
ADD
\family default
, except that last instruction is 
\begin_inset Formula $T_{6}=S_{U}$
\end_inset

(subtraction).
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Microprogramming
\end_layout

\begin_layout Section
Variable machine cycle
\end_layout

\begin_layout Section
Architecture of 8085 Processor
\end_layout

\begin_layout Section
Functions of all signals
\end_layout

\begin_layout Section
Bus concepts
\end_layout

\begin_layout Section
Multiplexed and De-multiplexed Bus
\end_layout

\begin_layout Section
Minimum system
\end_layout

\end_body
\end_document
